@import './constants';
@import './helpers';
@import '../../02-tools/tools-text-contrast/tools-text-contrast';
@import '../../02-tools/tools-map-recursive-merge/tools-map-recursive-merge';

// pre-defined theming system values
$bolt-theme-ui-colors: (
  light: (
    border: bolt-color("white"),
    contrast-filter: grayscale(100%) invert(100%) brightness(150%),
    disabled: bolt-color("gray", light),
    headline-link: bolt-color("white"),
    headline: bolt-color("white"),
    link: bolt-color("white"),
    primary: bolt-color("yellow"),
    secondary: bolt-color("white"),
    text-disabled: bolt-color("gray"),
    text: bolt-color("white"),
    neutral: bolt-color("gray"),
    brand: bolt-color("indigo"),
  ),
  dark: (
    border: bolt-color("indigo", dark),
    contrast-filter: none,
    disabled: bolt-color("gray", light),
    headline-link: bolt-color("indigo", light),
    headline: bolt-color("indigo"),
    link: bolt-color("indigo", light),
    primary: bolt-color("indigo", light),
    secondary: bolt-color("white"),
    text-disabled: bolt-color("gray"),
    text: bolt-color("black"),
    neutral: bolt-color("gray"),
    brand: bolt-color("indigo"),
  ),
) !default;

$bolt-theme-interactive-ui: (primary, secondary, brand) !default;

$bolt-theme-interactive-shades: (
  default: (
    0,
  ),
  lighten: (
    5,
    10,
    15,
    20,
    25,
  ),
  darken: (
    3,
    5,
    10,
    15,
    20,
    25,
  ),
) !default;

$bolt-themes: (
  xlight: (
    background: bolt-color("white"),
  ),
  light: (
    background: bolt-color("gray", xlight),
  ),
  dark: (
    background: bolt-color("indigo"),
  ),
  xdark: (
    background: bolt-color("indigo", dark),
  ),
) !default;

// combine the two sets of theming system data and calculate the dynamic values
@each $themeName, $themeProps in $bolt-themes {
  $background: map-get($themeProps, background);

  $lightOrDark: bolt-theme-contrast-tone($background);
  $bolt-ui-colors: map-get($bolt-theme-ui-colors, $lightOrDark);

  $bolt-themes: bolt-recursive-map-merge(
    $bolt-themes,
    (#{$themeName}: $bolt-ui-colors)
  );

  @each $element in $bolt-theme-interactive-ui {
    @each $name, $shades in $bolt-theme-interactive-shades {
      @each $shade in $shades {
        $mixColor: bolt-color("black");
        $displayName: '';
        $displayShadeName: '';
        $propValue: '';

        @if $name == 'lighten' {
          $mixColor: bolt-color("white");
        }

        // add dash to name of property, unless it's the first "default" one
        @if ($name != 'default') {
          $displayName: '-#{$name}';
        }

        // add dash to name of property, unless it's the first "default" one
        @if ($shade != 0) {
          $displayShadeName: '-#{$shade}';
        }

        $propName: #{$element}#{$displayName}#{$displayShadeName};
        $property: map-get-deep($bolt-themes, $themeName, $element);

        $propValue: mix($mixColor, $property, $shade);

        $bolt-themes: bolt-recursive-map-merge(
          $bolt-themes,
          (
            #{$themeName}:
              (
                $propName: $propValue,
                text-on-#{$propName}: bolt-text-contrast($propValue),
              )
          )
        );
      }
    }
  }
}

$bolt-themes-export: ();

@each $themeName, $themeOptions in $bolt-themes {
  @each $themeOptionName, $themeOptionValue in $themeOptions {
    @if type-of($themeOptionValue) ==
      color and
      type-of($themeOptionValue) !=
      string
    {
      $newColor: rgba($themeOptionValue, 1);

      $red: round(red($newColor));
      $green: round(green($newColor));
      $blue: round(blue($newColor));

      $bolt-themes-export: map-set-deep(
        $bolt-themes-export,
        ($themeName,
        $themeOptionName),
        rgb($red, $green, $blue)
      );
    }
  }
}

// NOTE: This function is depended upon by bolt-theme-prop-value (above) and thus must be defined in this file.
@function bolt-theme-is-valid-theme-prop-value($style) {
  @return type-of($style) == 'color' or $style == 'currentColor' or
    str_slice($style, 1, 4) == 'var(';
}

@function bolt-is-shimmable-theme-prop($prop) {
  $themePropVal: bolt-theme-prop-value('light', $prop);

  @if $themePropVal and
    type-of($themePropVal) ==
    color and
    type-of($themePropVal) !=
    string
  {
    @return true;
  } @else {
    @return false;
  }
}

@include bolt-export-data-sync(
  $bolt-css-vars-json-data-export + '.json',
  $bolt-themes-export
);
@include bolt-export-data-sync('theming.bolt.json', $bolt-themes);
